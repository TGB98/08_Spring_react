{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\08_Spring_react\\\\react\\\\boardproject-admin-client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport '../src/css/App.css';\nimport Login from './components/Login';\nimport DashBoard from './components/DashBoard';\nimport { useContext } from 'react';\nimport { AuthContext, AuthProvider } from './components/AuthContext';\nimport { BrowserRouter } from 'react-router';\n\n// Context API 사용하는 방법 2가지.\n\n// 1. 컴포넌트 분리하고 하위 컴포넌트에서 useContext 이용하는 방법.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(AuthProvider, {\n    children: /*#__PURE__*/_jsxDEV(AppComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nfunction AppComponent() {\n  _s();\n  // 로그인을 했다면 DashBoard 렌더링.\n  // 로그인을 안했다면 Login 렌더링.\n  // -> 조건 : 로그인 여부.\n  //           로그인을 했는지 안했는지 기억해줄 상태값. (user)\n  // ->        user 상태에는 로그인 한 사람의 정보를 세팅.\n  // ->        전역 관리를 해야함 -> user 라는 상태는 App에서 뿐만 아니라\n  // ->        App의 자식(하위) 컴포넌트에서도 이용이 가능 해야함.\n  // ->        Context API 사용 해야함.\n\n  const {\n    user\n  } = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n        children: /*#__PURE__*/_jsxDEV(DashBoard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-section\",\n      children: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n// 2. <AuthProvider> 안에서 <AuthContext.Consumer> 이용하는 방법.\n// -> <AuthContext.Consumer> 안에서 익명함수 형태로 전역 상태를 꺼내어 사용함.\n\n// function App() {\n\n//   return (\n\n//     <AuthProvider>\n//       <AuthContext.Consumer>\n//         {({ user }) =>\n//           user ? (\n//             <div className=\"body-container\">\n//               <DashBoard />\n//             </div>\n//           ) : (\n//             <div className=\"login-section\">\n//               <Login />\n//             </div>\n//           )\n//         }\n//       </AuthContext.Consumer>\n//     </AuthProvider>\n\n//   );\n\n// }\n_s(AppComponent, \"y3FQDew7UyrSqYkvQcTdCsLbAB8=\");\n_c2 = AppComponent;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppComponent\");","map":{"version":3,"names":["Login","DashBoard","useContext","AuthContext","AuthProvider","BrowserRouter","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","AppComponent","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","user","className","_c2","$RefreshReg$"],"sources":["C:/workspace/08_Spring_react/react/boardproject-admin-client/src/App.js"],"sourcesContent":["import '../src/css/App.css';\nimport Login from './components/Login';\nimport DashBoard from './components/DashBoard';\nimport { useContext } from 'react';\nimport { AuthContext, AuthProvider } from './components/AuthContext';\nimport { BrowserRouter } from 'react-router';\n\n// Context API 사용하는 방법 2가지.\n\n// 1. 컴포넌트 분리하고 하위 컴포넌트에서 useContext 이용하는 방법.\nfunction App() {\n\n  return (\n    <AuthProvider>\n\n      <AppComponent />\n\n    </AuthProvider>\n  )\n\n}\n\nfunction AppComponent() {\n    // 로그인을 했다면 DashBoard 렌더링.\n    // 로그인을 안했다면 Login 렌더링.\n    // -> 조건 : 로그인 여부.\n    //           로그인을 했는지 안했는지 기억해줄 상태값. (user)\n    // ->        user 상태에는 로그인 한 사람의 정보를 세팅.\n    // ->        전역 관리를 해야함 -> user 라는 상태는 App에서 뿐만 아니라\n    // ->        App의 자식(하위) 컴포넌트에서도 이용이 가능 해야함.\n    // ->        Context API 사용 해야함.\n\n    const { user } = useContext(AuthContext);\n\n  return (\n    <>\n      { user ? \n      (\n        <div className='body-container'>\n          <BrowserRouter>\n           <DashBoard />\n          </BrowserRouter>\n        </div>\n      )  : (\n        <div className='login-section'>\n          <Login />\n        </div>\n      )\n    }\n    </>\n\n  );\n}\n\n// 2. <AuthProvider> 안에서 <AuthContext.Consumer> 이용하는 방법.\n// -> <AuthContext.Consumer> 안에서 익명함수 형태로 전역 상태를 꺼내어 사용함.\n\n// function App() {\n\n//   return (\n\n//     <AuthProvider>\n//       <AuthContext.Consumer>\n//         {({ user }) =>\n//           user ? (\n//             <div className=\"body-container\">\n//               <DashBoard />\n//             </div>\n//           ) : (\n//             <div className=\"login-section\">\n//               <Login />\n//             </div>\n//           )\n//         }\n//       </AuthContext.Consumer>\n//     </AuthProvider>\n\n//   );\n\n// }\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,oBAAoB;AAC3B,OAAOA,KAAK,MAAM,oBAAoB;AACtC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,EAAEC,YAAY,QAAQ,0BAA0B;AACpE,SAASC,aAAa,QAAQ,cAAc;;AAE5C;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAEb,oBACEH,OAAA,CAACH,YAAY;IAAAO,QAAA,eAEXJ,OAAA,CAACK,YAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEJ,CAAC;AAGnB;AAACC,EAAA,GAVQP,GAAG;AAYZ,SAASE,YAAYA,CAAA,EAAG;EAAAM,EAAA;EACpB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM;IAAEC;EAAK,CAAC,GAAGjB,UAAU,CAACC,WAAW,CAAC;EAE1C,oBACEI,OAAA,CAAAE,SAAA;IAAAE,QAAA,EACIQ,IAAI,gBAEJZ,OAAA;MAAKa,SAAS,EAAC,gBAAgB;MAAAT,QAAA,eAC7BJ,OAAA,CAACF,aAAa;QAAAM,QAAA,eACbJ,OAAA,CAACN,SAAS;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,gBAENT,OAAA;MAAKa,SAAS,EAAC,eAAe;MAAAT,QAAA,eAC5BJ,OAAA,CAACP,KAAK;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EACN,gBAED,CAAC;AAGP;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AAAAE,EAAA,CAzDSN,YAAY;AAAAS,GAAA,GAAZT,YAAY;AA2DrB,eAAeF,GAAG;AAAC,IAAAO,EAAA,EAAAI,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}