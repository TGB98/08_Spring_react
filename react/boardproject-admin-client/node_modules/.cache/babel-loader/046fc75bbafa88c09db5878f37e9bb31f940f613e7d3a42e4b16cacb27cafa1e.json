{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\08_Spring_react\\\\react\\\\boardproject-admin-client\\\\src\\\\components\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n// Context는 React 에서 컴포넌트 계층 구조(트리)를 통해 데이터를 효율적으로 전달하기 위한 메커니즘.\n// 컴포넌트 간 전역 상태를 공유할 수 있는 컨텍스트를 생성.\n\n// Context 는 Provider 제공자와 Consumer 소비자\n// 전역 상태 제공자 (Provider) 정의.\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(() => {\n    const storeUser = localStorage.getItem('userData');\n    return storeUser ? JSON.parse(storeUser) : null;\n  });\n\n  // 이메일 입력 핸들러.\n  const changeInputEmail = e => {\n    setEmail(e.target.value);\n  };\n\n  // 비밀번호 입력 핸들러.\n  const changeInputPw = e => {\n    setPassword(e.target.value);\n  };\n\n  // 로그인 처리 함수.\n  const handleLogin = async e => {\n    e.preventDefault();\n\n    // 비동기 로그인 요청.\n    try {\n      const response = await axios.post('http://localhost:8080/admin/login', {\n        memberEmail: email,\n        memberPw: password\n      }, {\n        'Content-Type': 'application/json'\n      });\n      console.log(response);\n      const adminInfo = response.data;\n      if (adminInfo.length === 0) {\n        alert('이메일 혹은 비밀번호 불일치.');\n        return;\n      }\n\n      // 브라우저에서 현재 로그인한 관리자 정보를 기억하도록 해야함.\n      /*\r\n        localStorage\r\n        브라우저를 닫아도 데이터가 영구적 유지.\r\n        브라우저 전역에서 사용. (모든 탭과 창에서 공유)\r\n          sessionStorage\r\n        브라우저 탭 또는 창을 닫으면 데이터 즉시 삭제.\r\n        현재 탭 또는 창에서만 데이터가 유지됨.\r\n      */\n\n      const currentTime = new Date().getTime();\n      const expirationTime = currentTime + 60 * 60 * 1000; // 1시간\n\n      // 데이터와 만료시간을 localStorage 저장.\n      // localStorage는 만료시간 지정 기능 내장 X. (필요 시 따로 직접 구현함.)\n      localStorage.setItem('userData', JSON.stringify(adminInfo));\n      localStorage.setItem('expirationTime', expirationTime);\n\n      // 상태에 세팅.\n      setUser(adminInfo);\n\n      // 만료 시간을 확인하기 위해 타이머 설정.\n      setTimeout(() => {\n        // 만료 시간이 지나면 localStorage에 있는 데이터 삭제.\n        localStorage.removeItem('userData');\n        localStorage.removeItem('expirationTime');\n        alert('재로그인 해주세요.');\n        window.location.href = '/';\n      }, 60 * 60 * 1000); // 1시간 후\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // 로그아웃 처리 함수.\n  const handleLogout = async () => {\n    // get 비동기 요청\n    // /admin/logout\n    try {\n      const logout = await axios.get('http://localhost:8080/admin/logout');\n      if (logout.status === 200) {\n        setUser(null);\n        localStorage.removeItem('userData');\n        localStorage.removeItem('expirationTime');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // user라는 상태와 여러가지 이벤트핸들러(함수)를 묶어\n  // Provider를 통해 하위 컴포넌트로 데이터를 전달함.\n  const globalState = {\n    user,\n    changeInputEmail,\n    changeInputPw,\n    handleLogin,\n    handleLogout\n  };\n  return (\n    /*#__PURE__*/\n    // AuthContext.Provider : 데이터를 제공하는 역할.\n    // 하위 컴포넌트는 Prodiver가 제공하는 데이터를 사용.(소비 == Consumer) 활용 가능.\n    _jsxDEV(AuthContext.Provider, {\n      value: globalState,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(AuthProvider, \"1vyf+aHSA+7Y1W3Dk38/UpkslC4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["axios","createContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","email","setEmail","password","setPassword","user","setUser","storeUser","localStorage","getItem","JSON","parse","changeInputEmail","e","target","value","changeInputPw","handleLogin","preventDefault","response","post","memberEmail","memberPw","console","log","adminInfo","data","length","alert","currentTime","Date","getTime","expirationTime","setItem","stringify","setTimeout","removeItem","window","location","href","error","handleLogout","logout","get","status","globalState","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/workspace/08_Spring_react/react/boardproject-admin-client/src/components/AuthContext.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useState } from \"react\";\r\n\r\nexport const AuthContext = createContext();\r\n// Context는 React 에서 컴포넌트 계층 구조(트리)를 통해 데이터를 효율적으로 전달하기 위한 메커니즘.\r\n// 컴포넌트 간 전역 상태를 공유할 수 있는 컨텍스트를 생성.\r\n\r\n// Context 는 Provider 제공자와 Consumer 소비자\r\n// 전역 상태 제공자 (Provider) 정의.\r\nexport const AuthProvider = ( {children} ) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const [user, setUser] = useState(() => {\r\n    const storeUser = localStorage.getItem('userData');\r\n    return storeUser ? JSON.parse(storeUser) : null\r\n  });\r\n\r\n  // 이메일 입력 핸들러.\r\n  const changeInputEmail = (e) => {\r\n    setEmail(e.target.value);\r\n  }\r\n\r\n  // 비밀번호 입력 핸들러.\r\n  const changeInputPw = (e) => {\r\n    setPassword(e.target.value);\r\n  }\r\n\r\n  // 로그인 처리 함수.\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // 비동기 로그인 요청.\r\n    try {\r\n\r\n      const response = await axios.post(\r\n        'http://localhost:8080/admin/login',\r\n        { \r\n          memberEmail : email,\r\n          memberPw : password\r\n         },\r\n        {'Content-Type' : 'application/json'}\r\n      );\r\n\r\n      console.log(response);\r\n\r\n      const adminInfo = response.data;\r\n\r\n      if(adminInfo.length === 0) {\r\n        alert('이메일 혹은 비밀번호 불일치.');\r\n        return;\r\n      }\r\n\r\n      // 브라우저에서 현재 로그인한 관리자 정보를 기억하도록 해야함.\r\n      /*\r\n        localStorage\r\n        브라우저를 닫아도 데이터가 영구적 유지.\r\n        브라우저 전역에서 사용. (모든 탭과 창에서 공유)\r\n\r\n        sessionStorage\r\n        브라우저 탭 또는 창을 닫으면 데이터 즉시 삭제.\r\n        현재 탭 또는 창에서만 데이터가 유지됨.\r\n      */\r\n\r\n      const currentTime = new Date().getTime();\r\n      const expirationTime = currentTime + 60 * 60 * 1000; // 1시간\r\n\r\n      // 데이터와 만료시간을 localStorage 저장.\r\n      // localStorage는 만료시간 지정 기능 내장 X. (필요 시 따로 직접 구현함.)\r\n      localStorage.setItem('userData', JSON.stringify(adminInfo));\r\n      localStorage.setItem('expirationTime', expirationTime);\r\n\r\n      // 상태에 세팅.\r\n      setUser(adminInfo);\r\n\r\n      // 만료 시간을 확인하기 위해 타이머 설정.\r\n      setTimeout(() => {\r\n        // 만료 시간이 지나면 localStorage에 있는 데이터 삭제.\r\n        localStorage.removeItem('userData');\r\n        localStorage.removeItem('expirationTime');\r\n        alert('재로그인 해주세요.');\r\n        window.location.href = '/';\r\n      }, 60 * 60 * 1000); // 1시간 후\r\n\r\n    } catch(error) {\r\n      console.log(error);\r\n    }\r\n\r\n  }\r\n\r\n  // 로그아웃 처리 함수.\r\n  const handleLogout = async() => {\r\n\r\n    // get 비동기 요청\r\n    // /admin/logout\r\n    try {\r\n          const logout = await axios.get(\r\n            'http://localhost:8080/admin/logout'\r\n          )\r\n          \r\n          if(logout.status === 200) {\r\n            setUser(null);\r\n            localStorage.removeItem('userData');\r\n            localStorage.removeItem('expirationTime');\r\n          }\r\n          \r\n    } catch(error) {\r\n      console.log(error);\r\n    }\r\n\r\n  }\r\n\r\n  // user라는 상태와 여러가지 이벤트핸들러(함수)를 묶어\r\n  // Provider를 통해 하위 컴포넌트로 데이터를 전달함.\r\n  const globalState = {\r\n    user,\r\n    changeInputEmail,\r\n    changeInputPw,\r\n    handleLogin,\r\n    handleLogout\r\n  };\r\n\r\n  return (\r\n    // AuthContext.Provider : 데이터를 제공하는 역할.\r\n    // 하위 컴포넌트는 Prodiver가 제공하는 데이터를 사용.(소비 == Consumer) 활용 가능.\r\n    <AuthContext.Provider value={globalState}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,CAAC;AAC1C;AACA;;AAEA;AACA;AACA,OAAO,MAAMK,YAAY,GAAGA,CAAE;EAACC;AAAQ,CAAC,KAAM;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IACrC,MAAMa,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAClD,OAAOF,SAAS,GAAGG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,GAAG,IAAI;EACjD,CAAC,CAAC;;EAEF;EACA,MAAMK,gBAAgB,GAAIC,CAAC,IAAK;IAC9BX,QAAQ,CAACW,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMC,aAAa,GAAIH,CAAC,IAAK;IAC3BT,WAAW,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7B,CAAC;;EAED;EACA,MAAME,WAAW,GAAG,MAAOJ,CAAC,IAAK;IAC/BA,CAAC,CAACK,cAAc,CAAC,CAAC;;IAElB;IACA,IAAI;MAEF,MAAMC,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,IAAI,CAC/B,mCAAmC,EACnC;QACEC,WAAW,EAAGpB,KAAK;QACnBqB,QAAQ,EAAGnB;MACZ,CAAC,EACF;QAAC,cAAc,EAAG;MAAkB,CACtC,CAAC;MAEDoB,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;MAErB,MAAMM,SAAS,GAAGN,QAAQ,CAACO,IAAI;MAE/B,IAAGD,SAAS,CAACE,MAAM,KAAK,CAAC,EAAE;QACzBC,KAAK,CAAC,kBAAkB,CAAC;QACzB;MACF;;MAEA;MACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;MAGM,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MACxC,MAAMC,cAAc,GAAGH,WAAW,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;MAErD;MACA;MACArB,YAAY,CAACyB,OAAO,CAAC,UAAU,EAAEvB,IAAI,CAACwB,SAAS,CAACT,SAAS,CAAC,CAAC;MAC3DjB,YAAY,CAACyB,OAAO,CAAC,gBAAgB,EAAED,cAAc,CAAC;;MAEtD;MACA1B,OAAO,CAACmB,SAAS,CAAC;;MAElB;MACAU,UAAU,CAAC,MAAM;QACf;QACA3B,YAAY,CAAC4B,UAAU,CAAC,UAAU,CAAC;QACnC5B,YAAY,CAAC4B,UAAU,CAAC,gBAAgB,CAAC;QACzCR,KAAK,CAAC,YAAY,CAAC;QACnBS,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;MAC5B,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;IAEtB,CAAC,CAAC,OAAMC,KAAK,EAAE;MACbjB,OAAO,CAACC,GAAG,CAACgB,KAAK,CAAC;IACpB;EAEF,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAW;IAE9B;IACA;IACA,IAAI;MACE,MAAMC,MAAM,GAAG,MAAMlD,KAAK,CAACmD,GAAG,CAC5B,oCACF,CAAC;MAED,IAAGD,MAAM,CAACE,MAAM,KAAK,GAAG,EAAE;QACxBtC,OAAO,CAAC,IAAI,CAAC;QACbE,YAAY,CAAC4B,UAAU,CAAC,UAAU,CAAC;QACnC5B,YAAY,CAAC4B,UAAU,CAAC,gBAAgB,CAAC;MAC3C;IAEN,CAAC,CAAC,OAAMI,KAAK,EAAE;MACbjB,OAAO,CAACC,GAAG,CAACgB,KAAK,CAAC;IACpB;EAEF,CAAC;;EAED;EACA;EACA,MAAMK,WAAW,GAAG;IAClBxC,IAAI;IACJO,gBAAgB;IAChBI,aAAa;IACbC,WAAW;IACXwB;EACF,CAAC;EAED;IAAA;IACE;IACA;IACA7C,OAAA,CAACC,WAAW,CAACiD,QAAQ;MAAC/B,KAAK,EAAE8B,WAAY;MAAA9C,QAAA,EACtCA;IAAQ;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW;EAAC;AAG3B,CAAC;AAAAlD,EAAA,CAzHYF,YAAY;AAAAqD,EAAA,GAAZrD,YAAY;AAAA,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}